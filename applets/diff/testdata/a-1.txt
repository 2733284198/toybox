package diff

import (
	"flag"
	"fmt"
	"io"
	"io/ioutil"

	"github.com/sergi/go-diff/diffmatchpatch"
)

const binaryName = "diff"

type Option struct {
	helpFlag bool
}

/*
   -a      Treat all files as text
   -b      Ignore changes in the amount of whitespace
   -B      Ignore changes whose lines are all blank
   -d      Try hard to find a smaller set of changes
   -i      Ignore case differences
   -L      Use LABEL instead of the filename in the unified header
   -N      Treat absent files as empty
   -q      Output only whether files differ
   -r      Recurse
   --no-dereference Don't follow symlinks
   -S      Start with FILE when comparing directories
   -T      Make tabs line up by prefixing a tab when necessary
   -s      Report when two files are the same
   -t      Expand tabs to spaces in output
   -U      Output LINES lines of context
   -w      Ignore all whitespace
*/

func NewFlagSet() (*flag.FlagSet, *Option) {
	ret := flag.NewFlagSet(binaryName, flag.ExitOnError)

	ret.Usage = func() {
		fmt.Println("diff [-abBdiNqrTstw] [-L LABEL] [-S FILE] [-U LINES] FILE1 FILE2")
		ret.PrintDefaults()
	}

	var opt Option

	ret.BoolVar(&opt.helpFlag, "help", false, "show this message")

	return ret, &opt
}

func Main(stdout io.Writer, args []string) error {
	flagSet, opt := NewFlagSet()
	flagSet.Parse(args)

	if flagSet.NArg() != 2 || opt.helpFlag {
		flagSet.Usage()
		return nil
	}

	return diff(stdout, flagSet.Args(), opt)
}

func diff(w io.Writer, files []string, opt *Option) error {
	file1, err := ioutil.ReadFile(files[0])
	if err != nil {
		return err
	}
	file2, err := ioutil.ReadFile(files[1])
	if err != nil {
		return err
	}

	fmt.Printf(lineDiff(string(file1), string(file2)))

	return nil
}

func lineDiff(src1, src2 string) []diffmatchpatch.Diff {
	dmp := diffmatchpatch.New()
	a, b, c := dmp.DiffLinesToChars(src1, src2)
	diffs := dmp.DiffMain(a, b, false)
	result := dmp.DiffCharsToLines(diffs, c)
	fmt.Println(result)
	return result
}
